# -*- coding: utf-8 -*-
"""Cópia de Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NzO5j_Er1lxT-n5BIVo_Y8Nv0i9T0Z9w
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
import logging

# Constantes
URL_LOGIN = "https://smartnet.sgp.tsmx.com.br/accounts/login/"
URL_BUSCA1 = "https://smartnet.sgp.tsmx.com.br/admin/financeiro/relatorios/titulo/emitidos/"
URL_BUSCA2 = "https://smartnet.sgp.tsmx.com.br/admin/financeiro/relatorios/titulo/recebidos/"
URL_BUSCA3 = "https://smartnet.sgp.tsmx.com.br/admin/financeiro/relatorios/titulo/areceber/"

# Dados de login
USUARIO = "guilhermealves"
SENHA = "88412594"

# Dados da busca
DATA_INICIAL = "01/11/2024"
DATA_FINAL = "30/11/2024"

# Função para fazer login
def fazer_login(usuario: str, senha: str) -> requests.Response:
    try:
        response = requests.post(URL_LOGIN, data={"username": usuario, "password": senha}, timeout=10)
        response.raise_for_status()
        return response
    except requests.exceptions.ConnectionError as e:
        logging.error(f"Erro de conexão: {e}")
        return None

# Função para fazer buscas
def fazer_busca(response: requests.Response, url: str, params: dict) -> requests.Response:
    try:
        response = requests.get(url, params=params, cookies=response.cookies, timeout=10)
        response.raise_for_status()
        return response
    except requests.exceptions.ConnectionError as e:
        logging.error(f"Erro de conexão: {e}")
        return None

# Função para extrair dados das tabelas
def extrair_dados(tabela: BeautifulSoup) -> pd.DataFrame:
    dados = []
    for linha in tabela.find_all("tr"):
        cols = linha.find_all("td")
        if len(cols) > 0:
            dados.append([col.text.strip() for col in cols])
    return pd.DataFrame(dados)

# Função para criar gráficos
def criar_graficos(titulos_pendentes: pd.DataFrame, titulos_recebidos: pd.DataFrame, titulos_total: pd.DataFrame) -> None:
    # Somar os valores dos pagamentos
    soma_valores_recebidos = 0
    for index, row in titulos_recebidos.iterrows():
        valor = row['Valor Pago'].replace('.', '', 1).replace(',', '.', 1)
        if valor.replace('.', '', 1).isdigit():
            soma_valores_recebidos += float(valor)

    # Somar os valores totais
    soma_valores_total = 0
    for index, row in titulos_total.iterrows():
        valor = row['Valor'].replace('.', '', 1).replace(',', '.', 1)
        if valor.replace('.', '', 1).isdigit():
            soma_valores_total += float(valor)

    # Somar os valores pendentes
    soma_valores_pendentes = 0
    for index, row in titulos_pendentes.iterrows():
        valor = row[titulos_pendentes.columns[5]].replace('.', '', 1).replace(',', '.', 1)
        if valor.replace('.', '', 1).isdigit():
            soma_valores_pendentes += float(valor)

    # Criar gráficos
    valor_total = soma_valores_total
    valor_recebido = soma_valores_recebidos
    valor_pendente = soma_valores_pendentes
    porcentagem_recebido = (valor_recebido / valor_total) * 100
    porcentagem_pendente = (valor_pendente / valor_total) * 100

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

    ax1.bar(['Total', 'Recebido', 'Pendente'], [valor_total, valor_recebido, valor_pendente])
    ax1.set_xlabel('Categoria')
    ax1.set_ylabel('Valor (R$)')
    ax1.set_title('Receitas de Novembro')
    ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, loc: f"R${x:.2f}"))

    tamanho_total = 100
    tamanho_recebido = int((valor_recebido / valor_total) * tamanho_total)
    tamanho_pendente = tamanho_total - tamanho_recebido

    ax2.axhline(0.7, xmin=0, xmax=tamanho_total/100, color='blue', linewidth=10, label='Título a receber total')
    ax2.axhline(0.5, xmin=0, xmax=tamanho_recebido/100, color='green', linewidth=10, label=f'Título recebido: {porcentagem_recebido:.2f}%')
    ax2.axhline(0.3, xmin=0, xmax=tamanho_pendente/100, color='red', linewidth=10, label=f'Título a receber pendente: {porcentagem_pendente:.2f}%')

    ax2.text(0.5, 0.8, f'Título a receber total: R${valor_total:.2f}', ha='center', fontsize=14)
    ax2.text(0.5, 0.6, f'Título recebido: R${valor_recebido:.2f}', ha='center', fontsize=14)
    ax2.text(0.5, 0.4, f'Título a receber pendente: R${abs(valor_pendente):.2f}', ha='center', fontsize=14)

    ax2.set_axis_off()
    ax2.set_title('Resumo das Receitas')
    ax2.legend(loc='upper right')

    plt.tight_layout()
    plt.show()

    # Mostrar o resumo das receitas
    print('Resumo das Receitas:')
    print(f'Títulos a Receber Total: R${valor_total:.2f}')
    print(f'Títulos Recebidos: R${soma_valores_recebidos:.2f}')
    print(f'Títulos a Receber Pendente: R${abs(soma_valores_pendentes):.2f}')

# Função principal
def main() -> None:
    response = fazer_login(USUARIO, SENHA)
    if response is None:
        logging.error("Erro ao fazer login")
        return

    params1 = {
        "reqtime": "20241128233953",
        "dpb_token": "02ba1923822ed6513d8d6beab81685f3",
        "razaosocial": "",
        "tipo_cliente": "",
        "portador": "",
        "gateway_pagamento": "",
        "grupo": "",
        "nas": "",
        "torre": "",
        "data_ini": "",
        "data_fim": "",
        "data_venc_ini": DATA_INICIAL,
        "data_venc_fim": DATA_FINAL,
        "data_cad_contrato_ini": "",
        "data_cad_contrato_fim": "",
        "usuario": "",
        "status_titulo": ["1", "2"],
        "com_api": "",
        "com_pix": "",
        "id_remessa": "",
        "id_remessagateway": "",
        "com_remessa": "",
        "valor": "",
        "status_contrato": "",
        "vendedor": "",
        "titulos_nota": "",
        "titulos_nfse": "",
        "page": "",
        "printpdf": "",
        "printexcel": ""
    }

    params2 = {
        "reqtime": "20241128230720",
        "dpb_token": "df7e1ed519839fc00bbcbdfc5224db66",
        "razaosocial": "",
        "tipo_cliente": "",
        "portador": "",
        "gateway_pagamento": "",
        "grupo": "",
        "nas": "",
        "torre": "",
        "data_ini": DATA_INICIAL,
        "data_fim": DATA_FINAL,
        "data_venc_ini": "",
        "data_venc_fim": "",
        "data_cad_contrato_ini": "",
        "data_cad_contrato_fim": "",
        "usuario": "",
        "com_api": "",
        "com_pix": "",
        "id_remessa": "",
        "id_remessagateway": "",
        "com_remessa": "",
        "valor": "",
        "status_contrato": "",
        "vendedor": "",
        "titulos_nota": "",
        "titulos_nfse": "",
        "tipo_data": "pagamento",
        "pontorecebimento": "",
        "modobaixa": "",
        "retornobanco": "",
        "printpdf": "",
        "printexcel": "",
        "page": "",
        "data_p_ini": DATA_INICIAL,
        "data_p_fim": DATA_FINAL
    }

    params3 = {
        "reqtime": "20241128212806",
        "dpb_token": "3cb27e556e7de345be2bf4a3aa188a31",
        "razaosocial": "",
        "tipo_cliente": "",
        "empresas": "1",
        "pops": "1",
        "portador": "",
        "grupo": "",
        "nas": "",
        "torre": "",
        "data_venc_ini": DATA_INICIAL,
        "data_venc_fim": DATA_FINAL,
        "usuario": "",
        "com_api": "",
        "com_pix": "",
        "id_remessa": "",
        "com_remessa": "",
        "valor": "",
        "vendedor": "",
        "titulos_nota": "",
        "printpdf": "",
        "printexcel": "",
        "page": ""
    }

    response1 = fazer_busca(response, URL_BUSCA1, params1)
    response2 = fazer_busca(response, URL_BUSCA2, params2)
    response3 = fazer_busca(response, URL_BUSCA3, params3)

    if response1 is None or response2 is None or response3 is None:
        logging.error("Erro ao fazer busca")
        return

    tabela1 = BeautifulSoup(response1.content, "html.parser")
    tabela2 = BeautifulSoup(response2.content, "html.parser")
    tabela3 = BeautifulSoup(response3.content, "html.parser")

    titulos_total = extrair_dados(tabela1)
    titulos_recebidos = extrair_dados(tabela2)
    titulos_pendentes = extrair_dados(tabela3)

    # Verificar se os DataFrames estão vazios
    if not titulos_total.empty:
        titulos_total.columns = ["Cliente", "ID", "Data Vencimento", "Data Emissão", "Tipo", "Status", "Valor", "Valor Pago", "Plano", "ID Plano", "Observações"]
    if not titulos_recebidos.empty:
        titulos_recebidos.columns = ["Cliente", "ID", "Data Pagamento", "Data Emissão", "Tipo", "Status", "Valor", "Valor Pago", "Plano", "ID Plano", "Observações", "Coluna 12", "Coluna 13", "Coluna 14"]
    if not titulos_pendentes.empty:
        # Atribuir nomes às colunas do DataFrame titulos_pendentes
        titulos_pendentes.columns = [f"Coluna {i}" for i in range(len(titulos_pendentes.columns))]

    criar_graficos(titulos_pendentes, titulos_recebidos, titulos_total)

if __name__ == "__main__":
    main()

