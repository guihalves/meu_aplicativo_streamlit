# -*- coding: utf-8 -*-
"""Cópia de Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NzO5j_Er1lxT-n5BIVo_Y8Nv0i9T0Z9w
"""

import plotly.express as px
import pandas as pd
import requests
from bs4 import BeautifulSoup
from datetime import datetime

# Dados de login
usuario = "guilhermealves"
senha = "88412594"

# URL da página
url_login = "https://smartnet.sgp.tsmx.com.br/accounts/login/"
url_busca = "https://smartnet.sgp.tsmx.com.br/admin/financeiro/relatorios/titulo/recebidos/"

# Função para buscar os dados
def buscar_dados(datas_busca):
    valores = []
    for dados_busca in datas_busca:
        # Fazer login
        response = requests.post(url_login, data={"username": usuario, "password": senha}, timeout=10)

        # Verificar se o login foi bem-sucedido
        if response.status_code == 200:
            # Fazer busca
            response_busca = requests.get(url_busca, params={
                "reqtime": "20241128230720",
                "dpb_token": "df7e1ed519839fc00bbcbdfc5224db66",
                "razaosocial": "",
                "tipo_cliente": "",
                "portador": "",
                "gateway_pagamento": "",
                "grupo": "",
                "nas": "",
                "torre": "",
                "data_ini": dados_busca["ini"],
                "data_fim": dados_busca["fim"],
                "data_venc_ini": "",
                "data_venc_fim": "",
                "data_cad_contrato_ini": "",
                "data_cad_contrato_fim": "",
                "usuario": "",
                "com_api": "",
                "com_pix": "",
                "id_remessa": "",
                "id_remessagateway": "",
                "com_remessa": "",
                "valor": "",
                "status_contrato": "",
                "vendedor": "",
                "titulos_nota": "",
                "titulos_nfse": "",
                "tipo_data": "pagamento",
                "pontorecebimento": "",
                "modobaixa": "",
                "retornobanco": "",
                "printpdf": "",
                "printexcel": "",
                "page": "",
                "data_p_ini": dados_busca["ini"],
                "data_p_fim": dados_busca["fim"]
            }, cookies=response.cookies, timeout=10)

            # Verificar se a busca foi bem-sucedida
            if response_busca.status_code == 200:
                # Extrair os dados da tabela
                soup = BeautifulSoup(response_busca.content, "html.parser")
                tabela = soup.find("table")

                # Verificar se a tabela foi encontrada
                if tabela is not None:
                    dados = []
                    for linha in tabela.find_all("tr"):
                        cols = linha.find_all("td")
                        if len(cols) > 0:
                            dados.append([col.text.strip() for col in cols])

                    # Criar um DataFrame com os dados
                    df = pd.DataFrame(dados)

                    # Verificar se o DataFrame tem dados
                    if not df.empty:
                        # Verificar se o DataFrame tem as colunas necessárias
                        if len(df.columns) >= 8:
                            # Criar um novo DataFrame com apenas as colunas necessárias
                            colunas = df.columns
                            df_novo = df.iloc[:, [0, 7]]  # Pegar a coluna 0 (cliente) e 7 (valor pago)

                            # Resetar o índice do DataFrame
                            df_novo = df_novo.reset_index(drop=True)

                            # Renumerar o índice do DataFrame
                            df_novo.index += 1

                            # Somar os valores pagos
                            soma_valores_pagos = 0
                            for index, row in df_novo.iterrows():
                                valor_pago = row.iloc[1].replace('.', '', 1).replace(',', '.', 1)
                                if valor_pago.replace('.', '', 1).isdigit():
                                    soma_valores_pagos += float(valor_pago)

                            valores.append(soma_valores_pagos)
                        else:
                            valores.append(0)
                    else:
                        valores.append(0)
                else:
                    valores.append(0)
            else:
                valores.append(0)
        else:
            valores.append(0)
    return valores

# Dados da busca
agora = datetime.now()
mes_atual = agora.month
ano_atual = agora.year

datas_busca_atual = [
    {"ini": f"01/{mes_atual:02}/{ano_atual}", "fim": f"07/{mes_atual:02}/{ano_atual}", "titulo": "Semana 1"},
    {"ini": f"08/{mes_atual:02}/{ano_atual}", "fim": f"14/{mes_atual:02}/{ano_atual}", "titulo": "Semana 2"},
    {"ini": f"15/{mes_atual:02}/{ano_atual}", "fim": f"21/{mes_atual:02}/{ano_atual}", "titulo": "Semana 3"},
    {"ini": f"22/{mes_atual:02}/{ano_atual}", "fim": f"{agora.day:02}/{mes_atual:02}/{ano_atual}", "titulo": "Semana 4"}
]

valores_atual = buscar_dados(datas_busca_atual)

# Criar um DataFrame com os dados do mês atual
df_atual = pd.DataFrame({
    "semana": [f"Semana {i+1}" for i in range(len(datas_busca_atual))],
    f"{mes_atual}/{ano_atual}": valores_atual
})

# Criar um gráfico de colunas
fig_semanal = px.bar(x=df_atual["semana"], y=df_atual[f"{mes_atual}/{ano_atual}"], title=f"Gráfico de Colunas Semanais {mes_atual}/{ano_atual}",
                     color=df_atual["semana"],  # Cor das colunas será definida pela semana
                     color_discrete_sequence=["red", "blue", "green", "yellow"],  # Paleta de cores
                     text=[f"R${valor:,.2f}" for valor in valores_atual])

# Adicionar anotações com a data
for i, row in df_atual.iterrows():
    fig_semanal.add_annotation(x=row['semana'], y=row[f'{mes_atual}/{ano_atual}'], text=row['semana'], showarrow=False, yshift=-20)

# Atualizar o layout do gráfico
fig_semanal.update_layout(
    showlegend=False,
    xaxis_title_text='Semana',
    yaxis_title_text='Valor'
)

# Mostrar o gráfico semanal
fig_semanal.show()

# Dados da busca do mês anterior
if mes_atual == 1:
    mes_anterior = 12
    ano_anterior = ano_atual - 1
else:
    mes_anterior = mes_atual - 1
    ano_anterior = ano_atual

datas_busca_anterior = [
    {"ini": f"01/{mes_anterior:02}/{ano_anterior}", "fim": f"07/{mes_anterior:02}/{ano_anterior}", "titulo": "Semana 1"},
    {"ini": f"08/{mes_anterior:02}/{ano_anterior}", "fim": f"14/{mes_anterior:02}/{ano_anterior}", "titulo": "Semana 2"},
    {"ini": f"15/{mes_anterior:02}/{ano_anterior}", "fim": f"21/{mes_anterior:02}/{ano_anterior}", "titulo": "Semana 3"},
    {"ini": f"22/{mes_anterior:02}/{ano_anterior}", "fim": f"31/{mes_anterior:02}/{ano_anterior}", "titulo": "Semana 4"}
]

valores_anterior = buscar_dados(datas_busca_anterior)

# Criar um DataFrame com os dados dos dois meses
df = pd.DataFrame({
    "semana": [f"Semana {i+1}" for i in range(len(datas_busca_atual))],
    f"{mes_anterior}/{ano_anterior}": valores_anterior,
    f"{mes_atual}/{ano_atual}": valores_atual
})

# Calcular a variação em %
df[f'variação_{mes_anterior}_{ano_anterior}_{mes_atual}_{ano_atual}'] = ((df[f'{mes_atual}/{ano_atual}'] - df[f'{mes_anterior}/{ano_anterior}']) / df[f'{mes_anterior}/{ano_anterior}']) * 100

# Criar gráfico de colunas
fig_colunas = px.bar(df, x="semana", y=[f"{mes_anterior}/{ano_anterior}", f"{mes_atual}/{ano_atual}"], title=f"Gráfico de Colunas {mes_anterior}/{ano_anterior} e {mes_atual}/{ano_atual}", barmode="group", color_discrete_sequence=["blue", "red"])

# Adicionar legenda de variação
for i, row in df.iterrows():
    if row[f'variação_{mes_anterior}_{ano_anterior}_{mes_atual}_{ano_atual}'] > 0:
        legenda = f"Aumento de {row[f'variação_{mes_anterior}_{ano_anterior}_{mes_atual}_{ano_atual}']:.2f}%"
    elif row[f'variação_{mes_anterior}_{ano_anterior}_{mes_atual}_{ano_atual}'] < 0:
        legenda = f"Diminuição de {abs(row[f'variação_{mes_anterior}_{ano_anterior}_{mes_atual}_{ano_atual}']):.2f}%"
    else:
        legenda = "Estável"

    fig_colunas.add_annotation(x=row['semana'], y=row[f'{mes_atual}/{ano_atual}'], text=legenda, showarrow=False, yshift=20)

# Atualizar legendas
fig_colunas.update_layout(
    legend_title_text='Meses',
    xaxis_title_text='Semana',
    yaxis_title_text='Valor',
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    )
)

# Renomear legendas
fig_colunas.data[0].name = f'{mes_anterior} {ano_anterior}'
fig_colunas.data[1].name = f'{mes_atual} {ano_atual}'

# Mostrar gráfico
fig_colunas.show()

# Criar um loop para iterar sobre cada dia do mês
dias_mes = []
valores_diarios = []
for dia in range(1, agora.day + 1):
    data_ini = f"{dia:02}/{mes_atual:02}/{ano_atual}"
    data_fim = f"{dia:02}/{mes_atual:02}/{ano_atual}"
    valor_diario = buscar_dados([{"ini": data_ini, "fim": data_fim}])[0]
    dias_mes.append(data_ini)
    valores_diarios.append(valor_diario)

# Criar um DataFrame com os dados diários
df_diarios = pd.DataFrame({
    "Dia": dias_mes,
    "Valor Diário": valores_diarios
})

# Criar um gráfico de barras com linha
fig_barras_diarias = px.bar(df_diarios, x="Dia", y="Valor Diário", title="Valores Diários", text_auto=True, color_discrete_sequence=["green"])

# Adicionar linha que conecta os picos
fig_barras_diarias.add_scatter(x=df_diarios["Dia"], y=df_diarios["Valor Diário"], mode="lines", line=dict(color="blue", width=3, dash="solid"))

# Mostrar o gráfico
fig_barras_diarias.show()

